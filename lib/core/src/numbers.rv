import numbers::Match;
import iter;

//A trait for every primitive number type.
pub trait Number {}

//Primitive numbers, prefixed by signed/unsigned, suffixed by the amount of bits.
//Signed types
pub internal struct i64 {}
impl Number for i64 {}
pub internal struct i32 {}
impl Number for i32 {}
pub internal struct i16 {}
impl Number for i16 {}
pub internal struct i8 {}
impl Number for i8 {}

//Unsigned types
pub internal struct u64 {}
impl Number for u64 {}
pub internal struct u32 {}
impl Number for u32 {}
pub internal struct u16 {}
impl Number for u16 {}
pub internal struct u8 {}
impl Number for u8 {}

//Booleans, either true or false (1 or 0)
pub internal struct bool {}
impl Number for bool {}

trait Cast<T> {
    fn cast(self) -> T;
}

pub internal impl<T: Number, E: Number> Cast<T> for E {
    pub fn cast(self) -> T {

    }
}

// TODO sort this out
trait Match<T> {
    fn matches(self, other: T) -> bool;
}

pub impl<T: Number, E: Number> Match for T {
    pub fn matches(self, other: E) -> bool {
        return true;
    }
}

pub impl<T: u64, E: Iter<u64>> Match<E> for T {
    fn matches(self, other: E) -> bool {

        return false;
    }
}
